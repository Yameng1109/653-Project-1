ECE453/SE465/CS447/ECE653/CS647
Project Skeleton Files


https://ece.uwaterloo.ca/~lintan/courses/testing/llvm.html

You will learn likely-invariants from call graphs in a way reminiscent to that in SOSP’01 paper discussed in class (Coverity). In particular, you will learn what pairs of functions are called together. You will then use these likely- invariants to automatically detect software bugs.

Do NOT modify any files given in this archive. You may modify files according to your local configurations, but note that all changes will be overwritten before your project is being marked.

If clang is not in PATH, how to tell Makefile where it is installed?
In Makefile.common, "PREFIX=" defines where the LLVM executables are located. Put the FULL path if the executables are not in PATH.

How to run tests?
First, modify PREFIX accordingly.
To run all tests together, execute "verify.sh". Logs of all output can be found in /tmp with names "testing-<your usename>-pi-<time of log>.log".
clean.sh runs "make clean" in all tests directories, which removes temporary files created by verify.sh.
To generate the output for one test, run "make" in the test's directory. Your output should be identical to the "gold" file. Your output should be passed through "sort" before "diff"ing with the "gold" file, i.e. cat <your output> | sort | diff - gold_x_xx

To test a specific test case, run “make clean” and then “make” in the test’s directory. Your output should be identical to the “gold” file. Your output should be passed through sort before diffing with the gold file. For example:

  sort testX Y Z.out | diff gold Y Z -

• To run all tests together, execute verify.sh. Logs of all output can be found in /tmp.
• clean.sh runs “make clean” in all test directories.
• Our marking procedure:
1. We will clone your repo.
2. We will copy the required files from your pi/partA directory into the root of a clean skeleton folder that contains the full text suite with seven tests.
3. We will run “verify.sh” to test your program, which will automatically: 

(a) Run “make” to compile your program.
(b) Execute each test with a two minute limit.
